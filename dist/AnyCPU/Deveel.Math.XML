<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deveel.Math</name>
    </assembly>
    <members>
        <member name="T:Deveel.Math.BigDecimal">
            <summary>
            This class represents immutable arbitrary precision decimal numbers.
            </summary>
            <remarks>
            Each <see cref="T:Deveel.Math.BigDecimal"/> instance is represented with a unscaled 
            arbitrary precision mantissa (the unscaled value) and a scale. The value 
            of the <see cref="T:Deveel.Math.BigDecimal"/> is <see cref="P:Deveel.Math.BigDecimal.UnscaledValue"/> 10^(-<see cref="P:Deveel.Math.BigDecimal.Scale"/>).
            </remarks>
        </member>
        <member name="F:Deveel.Math.BigDecimal.Zero">
            <summary>
            The constant zero as a <see cref="T:Deveel.Math.BigDecimal"/>.
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal.One">
            <summary>
            The constant one as a <see cref="T:Deveel.Math.BigDecimal"/>.
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal.Ten">
            <summary>
            The constant ten as a <see cref="T:Deveel.Math.BigDecimal"/>.
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal.Log10Of2">
            <summary>
            The double closer to <c>Log10(2)</c>.
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal.toStringImage">
            <summary>
            The <see cref="T:System.String"/> representation is cached.
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal.FivePow">
            <summary>
            An array with powers of five that fit in the type <see cref="T:System.Int64"/>
            (<c>5^0,5^1,...,5^27</c>).
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal.TenPow">
            <summary>
            An array with powers of ten that fit in the type <see cref="T:System.Int64"/> 
            (<c>10^0,10^1,...,10^18</c>).
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal.LongTenPow">
            <summary>
            An array with powers of ten that fit in the type <see cref="T:System.Int64"/> 
            (<c>10^0,10^1,...,10^18</c>).
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal.BiScaledByZero">
            <summary>
            An array with the first <see cref="T:Deveel.Math.BigInteger"/> scaled by zero.
            (<c>[0,0],[1,0],...,[10,0]</c>).
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal.ZeroScaledBy">
            <summary>
            An array with the zero number scaled by the first positive scales.
            (<c>0*10^0, 0*10^1, ..., 0*10^10</c>).
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal.intVal">
            <summary>
            The arbitrary precision integer (unscaled value) in the internal
            representation of <see cref="T:Deveel.Math.BigDecimal"/>.
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal._scale">
            <summary>
            The 32-bit integer scale in the internal representation 
            of <see cref="T:Deveel.Math.BigDecimal"/>.
            </summary>
        </member>
        <member name="F:Deveel.Math.BigDecimal._precision">
            <summary>
            Represent the number of decimal digits in the unscaled value.
            </summary>
            <remarks>
            This precision is calculated the first time, and used in the following 
            calls of method <see cref="P:Deveel.Math.BigDecimal.Precision"/>. Note that some call to the private 
            method <see cref="M:Deveel.Math.BigDecimal.InplaceRound(Deveel.Math.MathContext)"/> could update this field.
            </remarks>
            <seealso cref="P:Deveel.Math.BigDecimal.Precision"/>
            <seealso cref="M:Deveel.Math.BigDecimal.InplaceRound(Deveel.Math.MathContext)"/>
        </member>
        <member name="M:Deveel.Math.BigDecimal.#ctor(System.Double)">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.BigDecimal"/> instance from the 64bit 
            double <paramref name="val"/>. The constructed big decimal is 
            equivalent to the given double.
            </summary>
            <param name="val">The double value to be converted to a 
            <see cref="T:Deveel.Math.BigDecimal"/> instance.</param>
            <remarks>
            For example, <c>new BigDecimal(0.1)</c> is equal to <c>0.1000000000000000055511151231257827021181583404541015625</c>. 
            This happens as <c>0.1</c> cannot be represented exactly in binary.
            <para>
            To generate a big decimal instance which is equivalent to <c>0.1</c> use the
            <see cref="M:Deveel.Math.BigDecimal.Parse(System.String)"/> method.
            </para>
            </remarks>
            <exception cref="T:System.FormatException">
            If <paramref name="val"/> is infinity or not a number.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigDecimal.#ctor(System.Double,Deveel.Math.MathContext)">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.BigDecimal"/> instance from the 64bit 
            double <paramref name="val"/>. The constructed big decimal is 
            equivalent to the given double.
            </summary>
            <param name="val">The double value to be converted to a 
            <see cref="T:Deveel.Math.BigDecimal"/> instance.</param>
            <param name="context">The rounding mode and precision for the result of 
            this operation.</param>
            <remarks>
            For example, <c>new BigDecimal(0.1)</c> is equal to <c>0.1000000000000000055511151231257827021181583404541015625</c>. 
            This happens as <c>0.1</c> cannot be represented exactly in binary.
            <para>
            To generate a big decimal instance which is equivalent to <c>0.1</c> use the
            <see cref="!:BigDecimal(string)"/> constructor.
            </para>
            </remarks>
            <exception cref="T:System.FormatException">
            If <paramref name="val"/> is infinity or not a number.
            </exception>
            <exception cref="T:System.ArithmeticException">
            if <see cref="P:Deveel.Math.MathContext.Precision"/> of <paramref name="context"/> is greater than 0
            and <see cref="P:Deveel.Math.MathContext.RoundingMode"/> is equal to <see cref="F:Deveel.Math.RoundingMode.Unnecessary"/>
            and the new big decimal cannot be represented within the given precision without rounding.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigDecimal.#ctor(Deveel.Math.BigInteger)">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.BigDecimal"/> instance from the
            <paramref name="val">given big integer</paramref>.
            </summary>
            <param name="val">The value to be converted to a <see cref="T:Deveel.Math.BigDecimal"/> instance.</param>
            <remarks>
            The <see cref="P:Deveel.Math.BigDecimal.Scale"/> of the result is <c>0</c>.
            </remarks>
        </member>
        <member name="M:Deveel.Math.BigDecimal.#ctor(Deveel.Math.BigInteger,Deveel.Math.MathContext)">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.BigDecimal"/> instance from the
            <paramref name="val">given big integer</paramref>.
            </summary>
            <param name="val">The value to be converted to a <see cref="T:Deveel.Math.BigDecimal"/> instance.</param>
            <param name="context">The rounding mode and precision for the result of this operation.</param>
            <remarks>
            The <see cref="P:Deveel.Math.BigDecimal.Scale"/> of the result is <c>0</c>.
            </remarks>
            <exception cref="T:System.ArithmeticException">
            If <see cref="P:Deveel.Math.MathContext.Precision"/> is greater than 0 and <see cref="P:Deveel.Math.MathContext.RoundingMode"/> is
            equal to <see cref="F:Deveel.Math.RoundingMode.Unnecessary"/> and the new big decimal cannot be represented  within the 
            given precision without rounding.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigDecimal.#ctor(Deveel.Math.BigInteger,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.BigDecimal"/> instance from a <paramref name="unscaledValue">given unscaled value</paramref> 
            and a given scale.
            </summary>
            <param name="unscaledValue">Represents the unscaled value of the decimal.</param>
            <param name="scale">The scale of this <see cref="T:Deveel.Math.BigDecimal"/></param>
            <remarks>
            The value of this instance is <c><paramref name="unscaledValue"/> 10^(-<paramref name="scale"/>)</c>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="unscaledValue"/> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigDecimal.#ctor(Deveel.Math.BigInteger,System.Int32,Deveel.Math.MathContext)">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.BigDecimal"/> instance from a <paramref name="unscaledValue">given unscaled 
            value</paramref> and a given scale.
            </summary>
            <param name="unscaledValue">Represents the unscaled value of this big decimal.</param>
            <param name="scale">The scale factor of the decimal.</param>
            <param name="context">The context used to round the result of the operations.</param>
            <remarks>
            The value of this instance is <c><paramref name="unscaledValue"/> 10^(-<paramref name="scale"/>)</c>. 
            The result is rounded according to the specified math context.
            </remarks>
            <exception cref="T:System.ArithmeticException">
            If <see cref="P:Deveel.Math.MathContext.Precision"/> is greater than zero, the
            <see cref="P:Deveel.Math.MathContext.RoundingMode"/> is set to <see cref="F:Deveel.Math.RoundingMode.Unnecessary"/>
            and the decimal cannot be represented within the given precision without rounding.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="unscaledValue"/> is null.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigDecimal.#ctor(System.Int32)">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.BigDecimal"/> instance from the given int 
            <paramref name="value"/>.
            </summary>
            <param name="value">The integer value to convert to a decimal.</param>
            <remarks>
            The scale factor of the result is zero.
            </remarks>
        </member>
        <member name="M:Deveel.Math.BigDecimal.#ctor(System.Int32,Deveel.Math.MathContext)">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.BigDecimal"/> instance from the given <paramref name="value">integer value</paramref>. 
            </summary>
            <param name="value">Integer value to be converted to a <see cref="T:Deveel.Math.BigDecimal"/> instance.</param>
            <param name="context">The rounding mode and precision for the result of this operation.</param>
            <remarks>
            The scale of the result is {@code 0}. The result is rounded according to the specified math context.
            </remarks>
            <exception cref="T:System.ArithmeticException">
            Thrown if precision is greater than 0 and <see cref="T:Deveel.Math.RoundingMode"/> is
            <see cref="F:Deveel.Math.RoundingMode.Unnecessary"/> and the new big decimal cannot be represented
            within the given precision without rounding. 
            </exception>
        </member>
        <member name="M:Deveel.Math.BigDecimal.#ctor(System.Int64)">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.BigDecimal"/> instance from the given long <paramref name="value"/>,
            with a scale of <c>0</c>.
            </summary>
            <param name="value">The long value to be converted to a <see cref="T:Deveel.Math.BigDecimal"/></param>
        </member>
        <member name="M:Deveel.Math.BigDecimal.#ctor(System.Int64,Deveel.Math.MathContext)">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.BigDecimal"/> instance from the given long <paramref name="value"/>,
            with a scale of <c>0</c> and the value rounded according to the specified context.
            </summary>
            <param name="value">The long value to be converted to a <see cref="T:Deveel.Math.BigDecimal"/></param>
            <param name="context">The context that defines the rounding mode and precision to apply to the
            value obtained from the given integer.</param>
            <exception cref="T:System.ArithmeticException">
            If the <see cref="P:Deveel.Math.MathContext.Precision"/> value specified is greater than <c>0</c> and
            the <see cref="P:Deveel.Math.MathContext.RoundingMode"/> is <see cref="F:Deveel.Math.RoundingMode.Unnecessary"/> and
            the new <see cref="T:Deveel.Math.BigDecimal"/> cannot be represented within the given precision
            without rounding.
            </exception>
        </member>
        <member name="P:Deveel.Math.BigDecimal.Sign">
            <summary>
            Gets the sign of the decimal, where <c>-1</c> if the value is less than 0,
            <c>0</c> if the value is 0 and <c>1</c> if the value is greater than 0.
            </summary>
            <seealso cref="P:Deveel.Math.BigDecimal.Sign"/>
        </member>
        <member name="P:Deveel.Math.BigDecimal.IsZero">
            <summary>
            Gets a value indicating if the decimal is equivalent to zero.
            </summary>
        </member>
        <member name="P:Deveel.Math.BigDecimal.Scale">
            <summary>
            Gets the scale value of this <see cref="T:Deveel.Math.BigDecimal"/> instance
            </summary>
            <remarks>
            The scale is the number of digits behind the decimal point. The value of 
            this <see cref="T:Deveel.Math.BigDecimal"/> is the <c>unsignedValue * 10^(-scale)</c>. 
            If the scale is negative, then this <see cref="T:Deveel.Math.BigDecimal"/> represents a big integer.
            </remarks>
        </member>
        <member name="P:Deveel.Math.BigDecimal.Precision">
            <summary>
            Gets the precision value of this <see cref="T:Deveel.Math.BigDecimal"/> instance.
            </summary>
            <remarks>
            <para>
            The precision is the number of decimal digits used to represent this decimal.
            It is equivalent to the number of digits of the unscaled value.
            </para>
            <para>
             The precision of <c>0</c> is <c>1</c> (independent of the scale).
            </para>
            </remarks>
        </member>
        <member name="P:Deveel.Math.BigDecimal.UnscaledValue">
            <summary>
            Gets the unscaled value (mantissa) of this <see cref="T:Deveel.Math.BigDecimal"/> instance as 
            a <see cref="T:Deveel.Math.BigInteger"/>.
            </summary>
            <remarks>
            The unscaled value can be computed as <c>(this * 10^(scale))</c>.
            </remarks>
        </member>
        <member name="M:Deveel.Math.BigDecimal.Create(System.Int64,System.Int32)">
            <summary>
            Returns a new <see cref="T:Deveel.Math.BigDecimal"/> instance whose value is equal to 
            <paramref name="unscaledVal"/> 10^(-<paramref name="scale"/>). The scale 
            of the result is <see cref="!:scale"/>, and its unscaled value is <see cref="!:unscaledVal"/>.
            </summary>
            <param name="unscaledVal">The unscaled value to be used to construct 
            the new <see cref="T:Deveel.Math.BigDecimal"/>.</param>
            <param name="scale">The scale to be used to construct the new <see cref="T:Deveel.Math.BigDecimal"/>.</param>
            <returns>
            Returns a <see cref="T:Deveel.Math.BigDecimal"/> instance with the value <c><see cref="!:unscaledVal"/> 
            * 10^(-<see cref="!:scale"/>)</c>.
            </returns>
        </member>
        <member name="M:Deveel.Math.BigDecimal.Create(System.Int64)">
            <summary>
            Returns a new <see cref="T:Deveel.Math.BigDecimal"/> instance whose value is equal 
            to <paramref name="unscaledVal"/>. The scale of the result is <c>0</c>, 
            and its unscaled value is <paramref name="unscaledVal"/>.
            </summary>
            <param name="unscaledVal">The value to be converted to a <see cref="T:Deveel.Math.BigDecimal"/>.</param>
            <returns>
            Returns a <see cref="T:Deveel.Math.BigDecimal"/> instance with the value <paramref name="unscaledVal"/>.
            </returns>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigDecimal.CompareTo(Deveel.Math.BigDecimal)" -->
        <member name="M:Deveel.Math.BigDecimal.Equals(System.Object)">
             Returns {@code true} if {@code x} is a {@code BigDecimal} instance and if
             this instance is equal to this big decimal. Two big decimals are equal if
             their unscaled value and their scale is equal. For example, 1.0
             (10*10^(-1)) is not equal to 1.00 (100*10^(-2)). Similarly, zero
             instances are not equal if their scale differs.
            
             @param x
                        object to be compared with {@code this}.
             @return true if {@code x} is a {@code BigDecimal} and {@code this == x}.
        </member>
        <member name="M:Deveel.Math.BigDecimal.GetHashCode">
             Returns a hash code for this {@code BigDecimal}.
            
             @return hash code for {@code this}.
        </member>
        <member name="M:Deveel.Math.BigDecimal.InplaceRound(Deveel.Math.MathContext)">
             It does all rounding work of the public method
             {@code round(MathContext)}, performing an inplace rounding
             without creating a new object.
            
             @param mc
                        the {@code MathContext} for perform the rounding.
             @see #round(MathContext)
        </member>
        <member name="M:Deveel.Math.BigDecimal.SmallRound(Deveel.Math.MathContext,System.Int32)">
             This method implements an efficient rounding for numbers which unscaled
             value fits in the type {@code long}.
            
             @param mc
                        the context to use
             @param discardedPrecision
                        the number of decimal digits that are discarded
             @see #round(MathContext)
        </member>
        <member name="M:Deveel.Math.BigDecimal.RoundingBehavior(System.Int32,System.Int32,Deveel.Math.RoundingMode)">
             Return an increment that can be -1,0 or 1, depending of
             {@code roundingMode}.
            
             @param parityBit
                        can be 0 or 1, it's only used in the case
                        {@code HALF_EVEN}
             @param fraction
                        the mantisa to be analyzed
             @param roundingMode
                        the type of rounding
             @return the carry propagated after rounding
        </member>
        <member name="M:Deveel.Math.BigDecimal.ValueExact(System.Int32)">
             If {@code intVal} has a fractional part throws an exception,
             otherwise it counts the number of bits of value and checks if it's out of
             the range of the primitive type. If the number fits in the primitive type
             returns this number as {@code long}, otherwise throws an
             exception.
            
             @param bitLengthOfType
                        number of bits of the type whose value will be calculated
                        exactly
             @return the exact value of the integer part of {@code BigDecimal}
                     when is possible
             @throws ArithmeticException when rounding is necessary or the
                         number don't fit in the primitive type
        </member>
        <member name="M:Deveel.Math.BigDecimal.AproxPrecision">
             If the precision already was calculated it returns that value, otherwise
             it calculates a very good approximation efficiently . Note that this
             value will be {@code precision()} or {@code precision()-1}
             in the worst case.
            
             @return an approximation of {@code precision()} value
        </member>
        <member name="M:Deveel.Math.BigDecimal.ToIntScale(System.Int64)">
             It tests if a scale of type {@code long} fits in 32 bits. It
             returns the same scale being casted to {@code int} type when is
             possible, otherwise throws an exception.
            
             @param longScale
                        a 64 bit scale
             @return a 32 bit scale when is possible
             @throws ArithmeticException when {@code scale} doesn't
                         fit in {@code int} type
             @see #scale
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigDecimal.GetZeroScaledBy(System.Int64)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigDecimal.ToEngineeringString" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigDecimal.ToEngineeringString(System.IFormatProvider)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigDecimal.ToPlainString(System.IFormatProvider)" -->
        <member name="M:Deveel.Math.BigDecimal.ToBigInteger">
             Returns this {@code BigDecimal} as a big integer instance. A fractional
             part is discarded.
            
             @return this {@code BigDecimal} as a big integer instance.
        </member>
        <member name="M:Deveel.Math.BigDecimal.ToBigIntegerExact">
             Returns this {@code BigDecimal} as a big integer instance if it has no
             fractional part. If this {@code BigDecimal} has a fractional part, i.e.
             if rounding would be necessary, an {@code ArithmeticException} is thrown.
            
             @return this {@code BigDecimal} as a big integer value.
             @throws ArithmeticException
                         if rounding is necessary.
        </member>
        <member name="M:Deveel.Math.BigDecimal.ToInt64">
             Returns this {@code BigDecimal} as an long value. Any fractional part is
             discarded. If the integral part of {@code this} is too big to be
             represented as an long, then {@code this} % 2^64 is returned.
            
             @return this {@code BigDecimal} as a long value.
        </member>
        <member name="M:Deveel.Math.BigDecimal.ToInt64Exact">
             Returns this {@code BigDecimal} as a long value if it has no fractional
             part and if its value fits to the int range ([-2^{63}..2^{63}-1]). If
             these conditions are not met, an {@code ArithmeticException} is thrown.
            
             @return this {@code BigDecimal} as a long value.
             @throws ArithmeticException
                         if rounding is necessary or the number doesn't fit in a long.
        </member>
        <member name="M:Deveel.Math.BigDecimal.ToInt32">
             Returns this {@code BigDecimal} as an int value. Any fractional part is
             discarded. If the integral part of {@code this} is too big to be
             represented as an int, then {@code this} % 2^32 is returned.
            
             @return this {@code BigDecimal} as a int value.
        </member>
        <member name="M:Deveel.Math.BigDecimal.ToInt32Exact">
             Returns this {@code BigDecimal} as a int value if it has no fractional
             part and if its value fits to the int range ([-2^{31}..2^{31}-1]). If
             these conditions are not met, an {@code ArithmeticException} is thrown.
            
             @return this {@code BigDecimal} as a int value.
             @throws ArithmeticException
                         if rounding is necessary or the number doesn't fit in a int.
        </member>
        <member name="M:Deveel.Math.BigDecimal.ToInt16Exact">
             Returns this {@code BigDecimal} as a short value if it has no fractional
             part and if its value fits to the short range ([-2^{15}..2^{15}-1]). If
             these conditions are not met, an {@code ArithmeticException} is thrown.
            
             @return this {@code BigDecimal} as a short value.
             @throws ArithmeticException
                         if rounding is necessary of the number doesn't fit in a
                         short.
        </member>
        <member name="M:Deveel.Math.BigDecimal.ToByteExact">
             Returns this {@code BigDecimal} as a byte value if it has no fractional
             part and if its value fits to the byte range ([-128..127]). If these
             conditions are not met, an {@code ArithmeticException} is thrown.
            
             @return this {@code BigDecimal} as a byte value.
             @throws ArithmeticException
                         if rounding is necessary or the number doesn't fit in a byte.
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigDecimal.ToSingle" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigDecimal.ToDouble" -->
        <member name="M:Deveel.Math.BigDecimalMath.Multiply(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is {@code this *
             multiplicand}. The scale of the result is the sum of the scales of the
             two arguments.
            
             @param multiplicand
                        value to be multiplied with {@code this}.
             @return {@code this * multiplicand}.
             @throws NullPointerException
                         if {@code multiplicand == null}.
        </member>
        <member name="F:Deveel.Math.DecimalString.ChZeros">
            <summary>
            An array filled with character <c>'0'</c>.
            </summary>
        </member>
        <member name="T:Deveel.Math.BigInteger">
            <summary>
            This class represents immutable integer numbers of arbitrary length.
            </summary>
            <remarks>
            Large numbers are typically used in security applications and therefore 
            BigIntegers offer dedicated functionality like the generation of large 
            prime numbers or the computation of modular inverse.
            <para>
            Since the class was modeled to offer all the functionality as the 
            {@link Integer} class does, it provides even methods that operate bitwise 
            on a two's complement representation of large integers. Note however that 
            the implementations favors an internal representation where magnitude and 
            sign are treated separately. Hence such operations are inefficient and 
            should be discouraged. In simple words: Do NOT implement any bit fields 
            based on BigInteger.
            </para>
            </remarks>
        </member>
        <member name="F:Deveel.Math.BigInteger.digits">
            The magnitude of this big integer. This array holds unsigned little
            endian digits. For example:
              {@code 13} is represented as [ 13 ]
              {@code -13} is represented as [ 13 ]
              {@code 2^32 + 13} is represented as [ 13, 1 ]
              {@code 2^64 + 13} is represented as [ 13, 0, 1 ]
              {@code 2^31} is represented as [ Integer.MIN_VALUE ]
            The magnitude array may be longer than strictly necessary, which results
            in additional trailing zeros.
        </member>
        <member name="F:Deveel.Math.BigInteger.numberLength">
            The length of this in measured in ints. Can be less than digits.length(). 
        </member>
        <member name="F:Deveel.Math.BigInteger.sign">
            The sign of this. 
        </member>
        <member name="F:Deveel.Math.BigInteger.Zero">
            <summary>
            The constant value <c>0</c> as <see cref="T:Deveel.Math.BigInteger"/>
            </summary>
        </member>
        <member name="F:Deveel.Math.BigInteger.One">
            <summary>
            The constant value <c>1</c> as <see cref="T:Deveel.Math.BigInteger"/>
            </summary>
        </member>
        <member name="F:Deveel.Math.BigInteger.Ten">
            <summary>
            The constant value <c>10</c> as <see cref="T:Deveel.Math.BigInteger"/>
            </summary>
        </member>
        <member name="F:Deveel.Math.BigInteger.MinusOne">
            <summary>
            The constant value <c>-1</c> as <see cref="T:Deveel.Math.BigInteger"/>
            </summary>
        </member>
        <member name="F:Deveel.Math.BigInteger.EQUALS">
            The {@code BigInteger} constant 0 used for comparison. 
        </member>
        <member name="F:Deveel.Math.BigInteger.GREATER">
            The {@code BigInteger} constant 1 used for comparison. 
        </member>
        <member name="F:Deveel.Math.BigInteger.LESS">
            The {@code BigInteger} constant -1 used for comparison. 
        </member>
        <member name="F:Deveel.Math.BigInteger.SmallValues">
            All the {@code BigInteger} numbers in the range [0,10] are cached. 
        </member>
        <member name="F:Deveel.Math.BigInteger.hashCode">
            Cache for the hash code. 
        </member>
        <member name="M:Deveel.Math.BigInteger.#ctor(System.Int32,System.Random)">
            <summary>
            Constructs a random non-negative big integer instance in the range [0, 2^(numBits)-1]
            </summary>
            <param name="numBits">The maximum length of the new <see cref="T:Deveel.Math.BigInteger"/> in bits.</param>
            <param name="rnd">An optional random number generator to be used.</param>
            <exception cref="T:System.ArgumentException">
            If the given <paramref name="numBits"/> value is less than 0.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigInteger.#ctor(System.Int32,System.Int32,System.Random)">
            <summary>
            Constructs a random <see cref="T:Deveel.Math.BigInteger"/> instance in the 
            range [0, 2^(bitLength)-1] which is probably prime.
            </summary>
            <param name="bitLength">The length of the new big integer in bits.</param>
            <param name="certainty">The tolerated primality uncertainty.</param>
            <param name="random">An optional random generator to be used.</param>
            <remarks>
            The probability that the returned <see cref="T:Deveel.Math.BigInteger"/> is prime 
            is beyond(1-1/2^certainty).
            </remarks>
            <exception cref="T:System.ArithmeticException">
            If the given <paramref name="bitLength"/> is smaller than 2.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigInteger.#ctor(System.Int32,System.Int32,System.Random,System.Threading.CancellationToken)">
            <summary>
            Constructs a random <see cref="T:Deveel.Math.BigInteger"/> instance in the 
            range [0, 2^(bitLength)-1] which is probably prime.
            </summary>
            <param name="bitLength">The length of the new big integer in bits.</param>
            <param name="certainty">The tolerated primality uncertainty.</param>
            <param name="random">An optional random generator to be used.</param>
            <param name="argCancelToken"></param>
            <remarks>
            The probability that the returned <see cref="T:Deveel.Math.BigInteger"/> is prime 
            is beyond(1-1/2^certainty).
            </remarks>
            <exception cref="T:System.ArithmeticException">
            If the given <paramref name="bitLength"/> is smaller than 2.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigInteger.#ctor(System.Int32,System.Byte[])">
            <summary>
            Constructs a new {@code BigInteger} instance with the given sign and the given magnitude. 
            </summary>
            <param name="signum">The sign as an integer (-1 for negative, 0 for zero, 1 for positive).</param>
            <param name="magnitude">The byte array that describes the magnitude, where the most significant
            byte is the first.</param>
            <exception cref="T:System.ArgumentNullException">
            If the provided <paramref name="magnitude"/> provided is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            If the provided <paramref name="signum"/> is different from -1, 0 or 1 or
            if the sign is 0 and the magnitude contains non-zero entries.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigInteger.#ctor(System.Byte[])">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.BigInteger"/> from the given two's 
            complement representation.
            </summary>
            <param name="val">The two's complement representation of the new big integer.</param>
            <remarks>
            The most significant byte is the entry at index 0. The most significant 
            bit of this entry determines the sign of the new <see cref="T:Deveel.Math.BigInteger"/> instance.
            The given array must not be empty.
            </remarks>
            <exception cref="T:System.ArgumentNullException">If the provided <paramref name="val"/> 
            is <c>null</c></exception>
            <exception cref="T:System.FormatException">If the length of <paramref name="val"/> is zero</exception>
        </member>
        <member name="M:Deveel.Math.BigInteger.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a number which array is of size 1.
            </summary>
            <param name="sign">The sign of the number</param>
            <param name="value">The only one digit of array</param>
        </member>
        <member name="M:Deveel.Math.BigInteger.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Constructs a number without to create new space.
            </summary>
            <param name="sign">The sign of the number</param>
            <param name="numberLength">The length of the internal array</param>
            <param name="digits">A reference of some array created before</param>
            <remarks>
            This construct should be used only if the three fields of 
            representation are known.
            </remarks>
        </member>
        <member name="M:Deveel.Math.BigInteger.#ctor(System.Int32,System.Int64)">
            <summary>
            Creates a new <see cref="T:Deveel.Math.BigInteger"/> whose value is equal to the 
            specified <see cref="T:System.Int64"/>.
            </summary>
            <param name="sign">The sign of the number</param>
            <param name="val">The value of the big integer</param>
        </member>
        <member name="M:Deveel.Math.BigInteger.#ctor(System.Int32,System.Int32[])">
            <summary>
            Creates a new <see cref="T:Deveel.Math.BigInteger"/> with the given sign and magnitude.
            </summary>
            <param name="signum">The sign of the number represented by <paramref name="digits"/></param>
            <param name="digits">The magnitude of the number</param>
            <remarks>
            This constructor does not create a copy, so any changes to the reference will 
            affect the new number.
            </remarks>
        </member>
        <member name="P:Deveel.Math.BigInteger.BitCount">
            <summary>
            Gets the number of bits in the binary representation of this 
            integer which differ from the sign bit.
            </summary>
            <remarks>
            <para>
            If this integer is positive the result is equivalent to the number of bits 
            set in the binary representation of this. If this integer is negative the 
            result is equivalent to the number of bits set in the binary representation 
            of <c>-this-1</c>.
            </para>
            <para>
            <strong>Note:</strong> Usage of this property is not recommended as the current 
            implementation is not efficient.
            </para>
            </remarks>
        </member>
        <member name="M:Deveel.Math.BigInteger.CompareTo(Deveel.Math.BigInteger)">
            <inheritdoc cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:Deveel.Math.BigInteger.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Deveel.Math.BigInteger.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Deveel.Math.BigInteger.Equals(Deveel.Math.BigInteger)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="P:Deveel.Math.BigInteger.IsOne">
            <summary>
            Gets a boolean indicating if this instance absolute 
            value is equivalent to <c>1</c>.
            </summary>
        </member>
        <member name="M:Deveel.Math.BigInteger.PutBytesPositiveToIntegers(System.Byte[])">
            Puts a big-endian byte array into a little-endian int array.
        </member>
        <member name="M:Deveel.Math.BigInteger.PutBytesNegativeToIntegers(System.Byte[])">
            Puts a big-endian byte array into a little-endian applying two
            complement.
        </member>
        <member name="M:Deveel.Math.BigInteger.FromInt64(System.Int64)">
            <summary>
            A utility for constructing a big integer from a long
            </summary>
            <param name="value">The source value of the conversion</param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Math.BigInteger"/> that is created
            from the source value specified.
            </returns>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigInteger.TestBit(Deveel.Math.BigInteger,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigInteger.SetBit(Deveel.Math.BigInteger,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigInteger.ClearBit(Deveel.Math.BigInteger,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigInteger.IsProbablePrime(Deveel.Math.BigInteger,System.Int32,System.Threading.CancellationToken)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigInteger.NextProbablePrime(Deveel.Math.BigInteger,System.Threading.CancellationToken)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigInteger.ProbablePrime(System.Int32,System.Random)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigInteger.FlipBit(Deveel.Math.BigInteger,System.Int32)" -->
        <member name="M:Deveel.Math.BigInteger.ToByteArray">
             Returns the two's complement representation of this BigInteger in a byte
             array.
            
             @return two's complement representation of {@code this}.
        </member>
        <member name="M:Deveel.Math.BigInteger.ToInt64">
             Returns this {@code BigInteger} as an long value. If {@code this} is too
             big to be represented as an long, then {@code this} % 2^64 is returned.
            
             @return this {@code BigInteger} as a long value.
        </member>
        <member name="M:Deveel.Math.BigInteger.ToSingle">
             Returns this {@code BigInteger} as an float value. If {@code this} is too
             big to be represented as an float, then {@code Float.POSITIVE_INFINITY}
             or {@code Float.NEGATIVE_INFINITY} is returned. Note, that not all
             integers x in the range [-Float.MAX_VALUE, Float.MAX_VALUE] can be
             represented as a float. The float representation has a mantissa of length
             24. For example, 2^24+1 = 16777217 is returned as float 16777216.0.
            
             @return this {@code BigInteger} as a float value.
        </member>
        <member name="M:Deveel.Math.BigInteger.ToDouble">
             Returns this {@code BigInteger} as an double value. If {@code this} is
             too big to be represented as an double, then {@code
             Double.POSITIVE_INFINITY} or {@code Double.NEGATIVE_INFINITY} is
             returned. Note, that not all integers x in the range [-Double.MAX_VALUE,
             Double.MAX_VALUE] can be represented as a double. The double
             representation has a mantissa of length 53. For example, 2^53+1 =
             9007199254740993 is returned as double 9007199254740992.0.
            
             @return this {@code BigInteger} as a double value
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigInteger.ToString(System.Int32)" -->
        <member name="M:Deveel.Math.BigMath.Add(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            <summary>
            Computes an addition between two big integer numbers
            </summary>
            <param name="a">The first term of the addition</param>
            <param name="b">The second term of the addition</param>
            <returns>Returns a new <see cref="T:Deveel.Math.BigInteger"/> that
            is the result of the addition of the two integers specified</returns>
        </member>
        <member name="M:Deveel.Math.BigMath.Subtract(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            <summary>
            Subtracts a big integer value from another 
            </summary>
            <param name="a">The subtrahend value</param>
            <param name="b">The subtractor value</param>
            <returns>
            </returns>
        </member>
        <member name="M:Deveel.Math.BigMath.ShiftRight(Deveel.Math.BigInteger,System.Int32)">
            <summary>
            Shifts the given big integer on the right by the given distance
            </summary>
            <param name="value">The integer value to shif</param>
            <param name="n">The shift distance</param>
            <remarks>
            <para>
            For negative arguments, the result is also negative.The shift distance 
            may be negative which means that <paramref name="value"/> is shifted left.
            </para>
            <para>
            <strong>Note:</strong> Usage of this method on negative values is not recommended 
            as the current implementation is not efficient.
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Deveel.Math.BigMath.ShiftLeft(Deveel.Math.BigInteger,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="n"></param>
            <remarks>
            <para>
            The result is equivalent to <c>value * 2^n</c> if n is greater 
            than or equal to 0.
            The shift distance may be negative which means that <paramref name="value"/> is 
            shifted right.The result then corresponds to <c>floor(value / 2 ^ (-n))</c>.
            </para>
            <para>
            <strong>Note:</strong> Usage of this method on negative values is not recommended 
            as the current implementation is not efficient.
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Deveel.Math.BigMath.And(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            <summary>
            Computes the bit per bit operator between two numbers
            </summary>
            <param name="a">The first term of the operation.</param>
            <param name="b">The second term of the oepration</param>
            <remarks>
            <strong>Note:</strong> Usage of this method is not recommended as 
            the current implementation is not efficient.
            </remarks>
            <returns>
            Returns a new <see cref="T:Deveel.Math.BigInteger"/> whose value is the result
            of an logical and between the given numbers.
            </returns>
            <exception cref="T:System.ArgumentException">
            If either <paramref name="a"/> or <paramref name="b"/> is <c>null</c>.
            </exception>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.AndNot(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Not(Deveel.Math.BigInteger)" -->
        <member name="M:Deveel.Math.BigMath.Negate(Deveel.Math.BigInteger)">
            <summary>
            Computes the negation of this <see cref="T:Deveel.Math.BigInteger"/>.
            </summary>
            <returns>
            Returns an instance of <see cref="T:Deveel.Math.BigInteger"/> that is the negated value
            of this instance.
            </returns>
        </member>
        <member name="M:Deveel.Math.BigMath.Divide(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
             Returns a new {@code BigInteger} whose value is {@code this / divisor}.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code this / divisor}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
        </member>
        <member name="M:Deveel.Math.BigMath.Divide(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
             The scale of the result is the difference of the scales of {@code this}
             and {@code divisor}. If the exact result requires more digits, then the
             scale is adjusted accordingly. For example, {@code 1/128 = 0.0078125}
             which has a scale of {@code 7} and precision {@code 5}.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code this / divisor}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if the result cannot be represented exactly.
        </member>
        <member name="M:Deveel.Math.BigMath.Divide(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal,Deveel.Math.RoundingMode)">
             Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
             The scale of the result is the scale of {@code this}. If rounding is
             required to meet the specified scale, then the specified rounding mode
             {@code roundingMode} is applied.
            
             @param divisor
                        value by which {@code this} is divided.
             @param roundingMode
                        rounding mode to be used to round the result.
             @return {@code this / divisor} rounded according to the given rounding
                     mode.
             @throws NullPointerException
                         if {@code divisor == null} or {@code roundingMode == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if {@code roundingMode == RoundingMode.UNNECESSARY} and
                         rounding is necessary according to the scale of this.
        </member>
        <member name="M:Deveel.Math.BigMath.Divide(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal,System.Int32,Deveel.Math.RoundingMode)">
             Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
             As scale of the result the parameter {@code scale} is used. If rounding
             is required to meet the specified scale, then the specified rounding mode
             {@code roundingMode} is applied.
            
             @param divisor
                        value by which {@code this} is divided.
             @param scale
                        the scale of the result returned.
             @param roundingMode
                        rounding mode to be used to round the result.
             @return {@code this / divisor} rounded according to the given rounding
                     mode.
             @throws NullPointerException
                         if {@code divisor == null} or {@code roundingMode == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if {@code roundingMode == RoundingMode.UNNECESSAR}Y and
                         rounding is necessary according to the given scale and given
                         precision.
        </member>
        <member name="M:Deveel.Math.BigMath.Divide(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal,Deveel.Math.MathContext)">
             Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
             The result is rounded according to the passed context {@code mc}. If the
             passed math context specifies precision {@code 0}, then this call is
             equivalent to {@code this.divide(divisor)}.
            
             @param divisor
                        value by which {@code this} is divided.
             @param mc
                        rounding mode and precision for the result of this operation.
             @return {@code this / divisor}.
             @throws NullPointerException
                         if {@code divisor == null} or {@code mc == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if {@code mc.getRoundingMode() == UNNECESSARY} and rounding
                         is necessary according {@code mc.getPrecision()}.
        </member>
        <member name="M:Deveel.Math.BigMath.DivideToIntegral(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is the integral part of
             {@code this / divisor}. The quotient is rounded down towards zero to the
             next integer. For example, {@code 0.5/0.2 = 2}.
            
             @param divisor
                        value by which {@code this} is divided.
             @return integral part of {@code this / divisor}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
        </member>
        <member name="M:Deveel.Math.BigMath.DivideToIntegral(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal,Deveel.Math.MathContext)">
             Returns a new {@code BigDecimal} whose value is the integral part of
             {@code this / divisor}. The quotient is rounded down towards zero to the
             next integer. The rounding mode passed with the parameter {@code mc} is
             not considered. But if the precision of {@code mc > 0} and the integral
             part requires more digits, then an {@code ArithmeticException} is thrown.
            
             @param divisor
                        value by which {@code this} is divided.
             @param mc
                        math context which determines the maximal precision of the
                        result.
             @return integral part of {@code this / divisor}.
             @throws NullPointerException
                         if {@code divisor == null} or {@code mc == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if {@code mc.getPrecision() > 0} and the result requires more
                         digits to be represented.
        </member>
        <member name="M:Deveel.Math.BigMath.DivideAndRemainder(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal,Deveel.Math.BigDecimal@)">
             Returns a {@code BigDecimal} array which contains the integral part of
             {@code this / divisor} at index 0 and the remainder {@code this %
             divisor} at index 1. The quotient is rounded down towards zero to the
             next integer.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code [this.divideToIntegralValue(divisor),
                     this.remainder(divisor)]}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @see #divideToIntegralValue
             @see #remainder
        </member>
        <member name="M:Deveel.Math.BigMath.DivideAndRemainder(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal,Deveel.Math.MathContext,Deveel.Math.BigDecimal@)">
             Returns a {@code BigDecimal} array which contains the integral part of
             {@code this / divisor} at index 0 and the remainder {@code this %
             divisor} at index 1. The quotient is rounded down towards zero to the
             next integer. The rounding mode passed with the parameter {@code mc} is
             not considered. But if the precision of {@code mc > 0} and the integral
             part requires more digits, then an {@code ArithmeticException} is thrown.
            
             @param divisor
                        value by which {@code this} is divided.
             @param mc
                        math context which determines the maximal precision of the
                        result.
             @return {@code [this.divideToIntegralValue(divisor),
                     this.remainder(divisor)]}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @see #divideToIntegralValue
             @see #remainder
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Remainder(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Remainder(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal,Deveel.Math.MathContext)" -->
        <member name="M:Deveel.Math.BigMath.Multiply(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is {@code this *
             multiplicand}. The scale of the result is the sum of the scales of the
             two arguments.
            
             @param multiplicand
                        value to be multiplied with {@code this}.
             @return {@code this * multiplicand}.
             @throws NullPointerException
                         if {@code multiplicand == null}.
        </member>
        <member name="M:Deveel.Math.BigMath.Multiply(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal,Deveel.Math.MathContext)">
             Returns a new {@code BigDecimal} whose value is {@code this *
             multiplicand}. The result is rounded according to the passed context
             {@code mc}.
            
             @param multiplicand
                        value to be multiplied with {@code this}.
             @param mc
                        rounding mode and precision for the result of this operation.
             @return {@code this * multiplicand}.
             @throws NullPointerException
                         if {@code multiplicand == null} or {@code mc == null}.
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Pow(Deveel.Math.BigDecimal,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Pow(Deveel.Math.BigDecimal,System.Int32,Deveel.Math.MathContext)" -->
        <member name="M:Deveel.Math.BigMath.Abs(Deveel.Math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is the absolute value of
             {@code this}. The scale of the result is the same as the scale of this.
            
             @return {@code abs(this)}
        </member>
        <member name="M:Deveel.Math.BigMath.Abs(Deveel.Math.BigDecimal,Deveel.Math.MathContext)">
             Returns a new {@code BigDecimal} whose value is the absolute value of
             {@code this}. The result is rounded according to the passed context
             {@code mc}.
            
             @param mc
                        rounding mode and precision for the result of this operation.
             @return {@code abs(this)}
        </member>
        <member name="M:Deveel.Math.BigMath.Plus(Deveel.Math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is {@code +this}. The scale
             of the result is the same as the scale of this.
            
             @return {@code this}
        </member>
        <member name="M:Deveel.Math.BigMath.Plus(Deveel.Math.BigDecimal,Deveel.Math.MathContext)">
            <remarks>
            Returns a new <see cref="T:Deveel.Math.BigDecimal"/> whose value is <c>+this</c>.
            </remarks>
            <param name="mc">Rounding mode and precision for the result of this operation.</param>
            <remarks>
            The result is rounded according to the passed context <paramref name="mc"/>.
            </remarks>
            <returns>
            Returns this decimal value rounded.
            </returns>
        </member>
        <member name="M:Deveel.Math.BigMath.Negate(Deveel.Math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is the {@code -this}. The
             scale of the result is the same as the scale of this.
            
             @return {@code -this}
        </member>
        <member name="M:Deveel.Math.BigMath.Negate(Deveel.Math.BigDecimal,Deveel.Math.MathContext)">
             Returns a new {@code BigDecimal} whose value is the {@code -this}. The
             result is rounded according to the passed context {@code mc}.
            
             @param mc
                        rounding mode and precision for the result of this operation.
             @return {@code -this}
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Round(Deveel.Math.BigDecimal,Deveel.Math.MathContext)" -->
        <member name="M:Deveel.Math.BigMath.Max(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal)">
             Returns the maximum of this {@code BigDecimal} and {@code val}.
            
             @param val
                        value to be used to compute the maximum with this.
             @return {@code max(this, val}.
             @throws NullPointerException
                         if {@code val == null}.
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.ScaleByPowerOfTen(Deveel.Math.BigDecimal,System.Int32)" -->
        <member name="M:Deveel.Math.BigMath.Remainder(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
             Returns a new {@code BigInteger} whose value is {@code this % divisor}.
             Regarding signs this methods has the same behavior as the % operator on
             int's, i.e. the sign of the remainder is the same as the sign of this.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code this % divisor}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
        </member>
        <member name="M:Deveel.Math.BigMath.DivideAndRemainder(Deveel.Math.BigInteger,Deveel.Math.BigInteger,Deveel.Math.BigInteger@)">
             Returns a {@code BigInteger} array which contains {@code this / divisor}
             at index 0 and {@code this % divisor} at index 1.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code [this / divisor, this % divisor]}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @see #divide
             @see #remainder
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Mod(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.ModInverse(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.ModPow(Deveel.Math.BigInteger,Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Pow(Deveel.Math.BigInteger,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Min(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <member name="M:Deveel.Math.BigMath.Max(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
             Returns the maximum of this {@code BigInteger} and {@code val}.
            
             @param val
                        value to be used to compute the maximum with {@code this}
             @return {@code max(this, val)}
             @throws NullPointerException
                         if {@code val == null}
        </member>
        <member name="M:Deveel.Math.BigMath.Gcd(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
             Returns a new {@code BigInteger} whose value is greatest common divisor
             of {@code this} and {@code val}. If {@code this==0} and {@code val==0}
             then zero is returned, otherwise the result is positive.
            
             @param val
                        value with which the greatest common divisor is computed.
             @return {@code gcd(this, val)}.
             @throws NullPointerException
                         if {@code val == null}.
        </member>
        <member name="M:Deveel.Math.BigMath.Abs(Deveel.Math.BigInteger)">
            <summary>
            Computes the absolute value of the given <see cref="T:Deveel.Math.BigInteger"/>
            </summary>
            <returns>
            Returns an instance of <see cref="T:Deveel.Math.BigInteger"/> that represents the
            absolute value of this instance.
            </returns>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Scale(Deveel.Math.BigDecimal,System.Int32,Deveel.Math.RoundingMode)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Scale(Deveel.Math.BigDecimal,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.MovePointLeft(Deveel.Math.BigDecimal,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.MovePointRight(Deveel.Math.BigDecimal,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BigMath.Ulp(Deveel.Math.BigDecimal)" -->
        <member name="M:Deveel.Math.BigMath.Add(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal,Deveel.Math.MathContext)">
            <summary>
            Adds a value to the current instance of <see cref="T:Deveel.Math.BigDecimal"/>,
            rounding the result according to the provided context.
            </summary>
            <param name="augend">The value to be added to this instance.</param>
            <param name="mc">The rounding mode and precision for the result of 
            this operation.</param>
            <returns>
            Returns a new <see cref="T:Deveel.Math.BigDecimal"/> whose value is <c>this + <paramref name="augend"/></c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="augend"/> or <paramref name="mc"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigMath.Add(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal)">
            <summary>
            Adds a value to the current instance of <see cref="T:Deveel.Math.BigDecimal"/>.
            The scale of the result is the maximum of the scales of the two arguments.
            </summary>
            <param name="augend">The value to be added to this instance.</param>
            <returns>
            Returns a new {@code BigDecimal} whose value is <c>this + <paramref name="augend"/></c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="augend"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigMath.Subtract(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal)">
            <summary>
            Subtracts the given value from this instance of <see cref="T:Deveel.Math.BigDecimal"/>.
            </summary>
            <remarks>
            </remarks>
            <param name="subtrahend">The value to be subtracted from this <see cref="T:Deveel.Math.BigDecimal"/>.</param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Math.BigDecimal"/> that is the result of the
            subtraction of the given <paramref name="subtrahend"/> from this instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the given <paramref name="subtrahend"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigMath.Subtract(Deveel.Math.BigDecimal,Deveel.Math.BigDecimal,Deveel.Math.MathContext)">
            <summary>
            Subtracts the given value from this instance of <see cref="T:Deveel.Math.BigDecimal"/>.
            </summary>
            <remarks>
            <para>
            This overload rounds the result of the operation to the <paramref name="mc">context</paramref>
            provided as argument.
            </para>
            </remarks>
            <param name="subtrahend">The value to be subtracted from this <see cref="T:Deveel.Math.BigDecimal"/>.</param>
            <param name="mc">The context used to round the result of this operation.</param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Math.BigDecimal"/> that is the result of the
            subtraction of the given <paramref name="subtrahend"/> from this instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If either of the given <paramref name="subtrahend"/> or <paramref name="mc"/> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Math.BigMath.StripTrailingZeros(Deveel.Math.BigDecimal)">
             Returns a new {@code BigDecimal} instance with the same value as {@code
             this} but with a unscaled value where the trailing zeros have been
             removed. If the unscaled value of {@code this} has n trailing zeros, then
             the scale and the precision of the result has been reduced by n.
            
             @return a new {@code BigDecimal} instance equivalent to this where the
                     trailing zeros of the unscaled value have been removed.
        </member>
        <member name="T:Deveel.Math.BitLevel">
             The operations are:
            <ul type="circle">
            <li>Bit counting</li>
            <li>Bit testing</li>
            <li>Getting of the lowest bit set</li>
            </ul>
            
            <summary>
            Static library that provides all the <b>bit level</b> operations for <see cref="T:Deveel.Math.BigInteger"/>.
            </summary>
            <remarks>
            The operations are:
            <list type="buller">
            <item><see cref="!:BigInteger.ShiftLeft">Left Shifting</see></item>
            <item><see cref="!:BigInteger.ShiftRight">Right Shifting</see></item>
            <item><see cref="M:Deveel.Math.BigInteger.ClearBit(Deveel.Math.BigInteger,System.Int32)">Bit Clearing</see></item>
            <item><see cref="M:Deveel.Math.BigInteger.SetBit(Deveel.Math.BigInteger,System.Int32)">Bit Setting</see></item>
            </list>
            <para>
            All operations are provided in immutable way, and some in both mutable and immutable.
            </para>
            </remarks>
        </member>
        <member name="M:Deveel.Math.BitLevel.TestBit(Deveel.Math.BigInteger,System.Int32)">
            <summary>
            Performs a fast bit testing for positive numbers.
            </summary>
            <remarks>
            The bit to to be tested must be in the range <c>[0, val.BitLength - 1]</c>
            </remarks>
        </member>
        <member name="M:Deveel.Math.BitLevel.NonZeroDroppedBits(System.Int32,System.Int32[])">
            <summary>
            Check if there are 1s in the lowest bits of this <see cref="T:Deveel.Math.BigInteger"/>
            </summary>
            <param name="numberOfBits">The number of the lowest bits to check</param>
            <param name="digits">The digital representation of the integer</param>
            <returns>
            Return false if all bits are zeros, true otherwise
            </returns>
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.BitLevel.InplaceShiftLeft(Deveel.Math.BigInteger,System.Int32)" -->
        <member name="M:Deveel.Math.BitLevel.ShiftLeft(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            Abstractly shifts left an array of integers in little endian (i.e. shift
            it right). Total shift distance in bits is intCount * 32 + count
            
            @param result the destination array
            @param source the source array
            @param intCount the shift distance in integers
            @param count an additional shift distance in bits
        </member>
        <member name="M:Deveel.Math.BitLevel.ShiftLeftOneBit(System.Int32[],System.Int32[],System.Int32)">
             Shifts the source digits left one bit, creating a value whose magnitude
             is doubled.
            
             @param result an array of digits that will hold the computed result when
                  this method returns. The size of this array is {@code srcLen + 1},
                  and the format is the same as {@link BigInteger#digits}.
             @param source the array of digits to shift left, in the same format as
                  {@link BigInteger#digits}.
             @param srcLen the length of {@code source}; may be less than {@code
                  source.length}
        </member>
        <member name="M:Deveel.Math.BitLevel.ShiftRight(Deveel.Math.BigInteger,System.Int32)">
            @see BigInteger#shiftRight(int) 
        </member>
        <member name="M:Deveel.Math.BitLevel.InplaceShiftRight(Deveel.Math.BigInteger,System.Int32)">
            Performs {@code val >>= count} where {@code val} is a positive number.
        </member>
        <member name="M:Deveel.Math.BitLevel.ShiftRight(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            Shifts right an array of integers. Total shift distance in bits is
            intCount * 32 + count.
            
            @param result
                       the destination array
            @param resultLen
                       the destination array's length
            @param source
                       the source array
            @param intCount
                       the number of elements to be shifted
            @param count
                       the number of bits to be shifted
            @return dropped bit's are all zero (i.e. remaider is zero)
        </member>
        <member name="M:Deveel.Math.BitLevel.FlipBit(Deveel.Math.BigInteger,System.Int32)">
            Performs a flipBit on the BigInteger, returning a BigInteger with the the
            specified bit flipped.
            @param intCount: the index of the element of the digits array where the operation will be performed
            @param bitNumber: the bit's position in the intCount element
        </member>
        <member name="T:Deveel.Math.Conversion">
            Static library that provides {@link BigInteger} base conversion from/to any
            integer represented in an {@link java.lang.String} Object.
        </member>
        <member name="F:Deveel.Math.Conversion.digitFitInInt">
            Holds the maximal exponent for each radix, so that radix<sup>digitFitInInt[radix]</sup>
            fit in an {@code int} (32 bits).
        </member>
        <member name="F:Deveel.Math.Conversion.bigRadices">
            bigRadices values are precomputed maximal powers of radices (integer
            numbers from 2 to 36) that fit into unsigned int (32 bits). bigRadices[0] =
            2 ^ 31, bigRadices[8] = 10 ^ 9, etc.
        </member>
        <member name="M:Deveel.Math.Conversion.BigInteger2String(Deveel.Math.BigInteger,System.Int32)">
            @see BigInteger#ToString(int) 
        </member>
        <member name="M:Deveel.Math.Conversion.ToDecimalScaledString(Deveel.Math.BigInteger,System.Int32)">
            Builds the correspondent {@code String} representation of {@code val}
            being scaled by {@code scale}.
            
            @see BigInteger#ToString()
            @see BigDecimal#ToString()
        </member>
        <member name="M:Deveel.Math.Conversion.BigInteger2Double(Deveel.Math.BigInteger)">
            @see BigInteger#ToDouble() 
        </member>
        <member name="T:Deveel.Math.Division">
             Static library that provides all operations related with division and modular
             arithmetic to {@link BigInteger}. Some methods are provided in both mutable
             and immutable way. There are several variants provided listed below:
             
             <ul type="circle">
             <li> <b>Division</b>
             <ul type="circle">
             <li>{@link BigInteger} division and remainder by {@link BigInteger}.</li>
             <li>{@link BigInteger} division and remainder by {@code int}.</li>
             <li><i>gcd</i> between {@link BigInteger} numbers.</li>
             </ul>
             </li>
             <li> <b>Modular arithmetic </b>
             <ul type="circle">
             <li>Modular exponentiation between {@link BigInteger} numbers.</li>
             <li>Modular inverse of a {@link BigInteger} numbers.</li>
             </ul>
             </li>
            </ul>
        </member>
        <member name="M:Deveel.Math.Division.Divide(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Divides the array 'a' by the array 'b' and gets the quotient and the
            remainder. Implements the Knuth's division algorithm. See D. Knuth, The
            Art of Computer Programming, vol. 2. Steps D1-D8 correspond the steps in
            the algorithm description.
            
            @param quot the quotient
            @param quotLength the quotient's length
            @param a the dividend
            @param aLength the dividend's length
            @param b the divisor
            @param bLength the divisor's length
            @return the remainder
        </member>
        <member name="M:Deveel.Math.Division.DivideArrayByInt(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            Divides an array by an integer value. Implements the Knuth's division
            algorithm. See D. Knuth, The Art of Computer Programming, vol. 2.
            
            @param dest the quotient
            @param src the dividend
            @param srcLength the length of the dividend
            @param divisor the divisor
            @return remainder
        </member>
        <member name="M:Deveel.Math.Division.RemainderArrayByInt(System.Int32[],System.Int32,System.Int32)">
            Divides an array by an integer value. Implements the Knuth's division
            algorithm. See D. Knuth, The Art of Computer Programming, vol. 2.
            
            @param src the dividend
            @param srcLength the length of the dividend
            @param divisor the divisor
            @return remainder
        </member>
        <member name="M:Deveel.Math.Division.Remainder(Deveel.Math.BigInteger,System.Int32)">
            Divides a <code>BigInteger</code> by a signed <code>int</code> and
            returns the remainder.
            
            @param dividend the BigInteger to be divided. Must be non-negative.
            @param divisor a signed int
            @return divide % divisor
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.Division.DivideLongByInt(System.Int64,System.Int32)" -->
        <member name="M:Deveel.Math.Division.DivideAndRemainderByInteger(Deveel.Math.BigInteger,System.Int32,System.Int32)">
            Computes the quotient and the remainder after a division by an {@code int}
            number.
            
            @return an array of the form {@code [quotient, remainder]}.
        </member>
        <member name="M:Deveel.Math.Division.MultiplyAndSubtract(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            Multiplies an array by int and subtracts it from a subarray of another
            array.
            
            @param a the array to subtract from
            @param start the start element of the subarray of a
            @param b the array to be multiplied and subtracted
            @param bLen the length of b
            @param c the multiplier of b
            @return the carry element of subtraction
        </member>
        <member name="M:Deveel.Math.Division.GcdBinary(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @param m a positive modulus
            Return the greatest common divisor of op1 and op2,
            
            @param op1
                       must be greater than zero
            @param op2
                       must be greater than zero
            @see BigInteger#gcd(BigInteger)
            @return {@code GCD(op1, op2)}
        </member>
        <member name="M:Deveel.Math.Division.GcdBinary(System.Int64,System.Int64)">
            Performs the same as {@link #gcdBinary(BigInteger, BigInteger)}, but
            with numbers of 63 bits, represented in positives values of {@code long}
            type.
            
            @param op1
                       a positive number
            @param op2
                       a positive number
            @see #gcdBinary(BigInteger, BigInteger)
            @return <code>GCD(op1, op2)</code>
        </member>
        <member name="M:Deveel.Math.Division.ModInverseMontgomery(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            Calculates a.modInverse(p) Based on: Savas, E; Koc, C "The Montgomery Modular
            Inverse - Revised"
        </member>
        <member name="M:Deveel.Math.Division.CalcN(Deveel.Math.BigInteger)">
            Calculate the first digit of the inverse
        </member>
        <member name="M:Deveel.Math.Division.IsPowerOfTwo(Deveel.Math.BigInteger,System.Int32)">
            @return bi == abs(2^exp)
        </member>
        <member name="M:Deveel.Math.Division.HowManyIterations(Deveel.Math.BigInteger,System.Int32)">
             Calculate how many iteration of Lorencz's algorithm would perform the
             same operation
            
             @param bi
             @param n
             @return
        </member>
        <member name="M:Deveel.Math.Division.ModInverseLorencz(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            
             Based on "New Algorithm for Classical Modular Inverse" Róbert Lórencz.
             LNCS 2523 (2002)
            
             @return a^(-1) mod m
        </member>
        <member name="M:Deveel.Math.Division.OddModPow(Deveel.Math.BigInteger,Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            Performs modular exponentiation using the Montgomery Reduction. It
            requires that all parameters be positive and the modulus be odd. >
            
            @see BigInteger#modPow(BigInteger, BigInteger)
            @see #monPro(BigInteger, BigInteger, BigInteger, int)
            @see #slidingWindow(BigInteger, BigInteger, BigInteger, BigInteger,
                                 int)
            @see #squareAndMultiply(BigInteger, BigInteger, BigInteger, BigInteger,
                                 int)
        </member>
        <member name="M:Deveel.Math.Division.EvenModPow(Deveel.Math.BigInteger,Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            Performs modular exponentiation using the Montgomery Reduction. It
            requires that all parameters be positive and the modulus be even. Based
            <i>The square and multiply algorithm and the Montgomery Reduction C. K.
            Koc - Montgomery Reduction with Even Modulus</i>. The square and
            multiply algorithm and the Montgomery Reduction.
            
            @ar.org.fitc.ref "C. K. Koc - Montgomery Reduction with Even Modulus"
            @see BigInteger#modPow(BigInteger, BigInteger)
        </member>
        <member name="M:Deveel.Math.Division.Pow2ModPow(Deveel.Math.BigInteger,Deveel.Math.BigInteger,System.Int32)">
            It requires that all parameters be positive.
            
            @return {@code base<sup>exponent</sup> mod (2<sup>j</sup>)}.
            @see BigInteger#modPow(BigInteger, BigInteger)
        </member>
        <member name="M:Deveel.Math.Division.MonPro(Deveel.Math.BigInteger,Deveel.Math.BigInteger,Deveel.Math.BigInteger,System.Int32)">
            Implements the Montgomery Product of two integers represented by
            {@code int} arrays. The arrays are supposed in <i>little
            endian</i> notation.
            
            @param a The first factor of the product.
            @param b The second factor of the product.
            @param modulus The modulus of the operations. Z<sub>modulus</sub>.
            @param n2 The digit modulus'[0].
            @ar.org.fitc.ref "C. K. Koc - Analyzing and Comparing Montgomery
                             Multiplication Algorithms"
            @see #modPowOdd(BigInteger, BigInteger, BigInteger)
        </member>
        <member name="M:Deveel.Math.Division.FinalSubtraction(System.Int32[],Deveel.Math.BigInteger)">
            Performs the final reduction of the Montgomery algorithm.
            @see monPro(BigInteger, BigInteger, BigInteger, long)
            @see monSquare(BigInteger, BigInteger, long)
        </member>
        <member name="M:Deveel.Math.Division.ModPow2Inverse(Deveel.Math.BigInteger,System.Int32)">
            @param x an odd positive number.
            @param n the exponent by which 2 is raised.
            @return {@code x<sup>-1</sup> (mod 2<sup>n</sup>)}.
        </member>
        <member name="M:Deveel.Math.Division.InplaceModPow2(Deveel.Math.BigInteger,System.Int32)">
            Performs {@code x = x mod (2<sup>n</sup>)}.
            
            @param x a positive number, it will store the result.
            @param n a positive exponent of {@code 2}.
        </member>
        <member name="T:Deveel.Math.Elementary">
            Static library that provides the basic arithmetic mutable operations for
            {@link BigInteger}. The operations provided are listed below.
            <ul type="circle">
            <li>Addition.</li>
            <li>Subtraction.</li>
            <li>Comparison.</li>
            </ul>
            In addition to this, some <i><b>Inplace</b></i> (mutable) methods are provided.
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.Elementary.CompareArrays(System.Int32[],System.Int32[],System.Int32)" -->
        <member name="M:Deveel.Math.Elementary.Add(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @see BigInteger#add(BigInteger) 
        </member>
        <member name="M:Deveel.Math.Elementary.add(System.Int32[],System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Performs {@code res = a + b}. 
        </member>
        <member name="M:Deveel.Math.Elementary.subtract(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @see BigInteger#subtract(BigInteger) 
        </member>
        <member name="M:Deveel.Math.Elementary.subtract(System.Int32[],System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Performs {@code res = a - b}. It is assumed the magnitude of a is not
            less than the magnitude of b.
        </member>
        <member name="M:Deveel.Math.Elementary.add(System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Addss the value represented by {@code b} to the value represented by
            {@code a}. It is assumed the magnitude of a is not less than the
            magnitude of b.
            
            @return {@code a + b}
        </member>
        <member name="M:Deveel.Math.Elementary.inplaceAdd(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            Performs {@code op1 += op2}. {@code op1} must have enough place to store
            the result (i.e. {@code op1.bitLength() >= op2.bitLength()}). Both
            should be positive (i.e. {@code op1 >= op2}).
            
            @param op1 the input minuend, and the output result.
            @param op2 the addend
        </member>
        <member name="M:Deveel.Math.Elementary.inplaceAdd(System.Int32[],System.Int32,System.Int32)">
            Adds an integer value to the array of integers remembering carry.
            
            @return a possible generated carry (0 or 1)
        </member>
        <member name="M:Deveel.Math.Elementary.inplaceAdd(Deveel.Math.BigInteger,System.Int32)">
            Performs: {@code op1 += addend}. The number must to have place to hold a
            possible carry.
        </member>
        <member name="M:Deveel.Math.Elementary.inplaceSubtract(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            Performs {@code op1 -= op2}. {@code op1} must have enough place to store
            the result (i.e. {@code op1.bitLength() >= op2.bitLength()}). Both
            should be positive (what implies that {@code op1 >= op2}).
            
            @param op1
                       the input minuend, and the output result.
            @param op2
                       the subtrahend
        </member>
        <member name="M:Deveel.Math.Elementary.inverseSubtract(System.Int32[],System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Performs {@code res = b - a}
        </member>
        <member name="M:Deveel.Math.Elementary.subtract(System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Subtracts the value represented by {@code b} from the value represented
            by {@code a}. It is assumed the magnitude of a is not less than the
            magnitude of b.
            
            @return {@code a - b}
        </member>
        <member name="M:Deveel.Math.Elementary.completeInPlaceSubtract(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            Same as
            
            @link #inplaceSubtract(BigInteger, BigInteger), but without the
                  restriction of non-positive values
            @param op1
                       should have enough space to save the result
            @param op2
        </member>
        <member name="M:Deveel.Math.Elementary.completeInPlaceAdd(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            Same as @link #inplaceAdd(BigInteger, BigInteger), but without the restriction of
                  non-positive values
            @param op1 any number
            @param op2 any number
        </member>
        <member name="M:Deveel.Math.Elementary.unsignedArraysCompare(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            Compares two arrays, representing unsigned integer in little-endian order.
            Returns +1,0,-1 if a is - respective - greater, equal or lesser then b 
        </member>
        <member name="T:Deveel.Math.Logical">
            The library implements some logical operations over {@code BigInteger}. The
            operations provided are listed below.
            <ul type="circle">
            <li>not</li>
            <li>and</li>
            <li>andNot</li>
            <li>or</li>
            <li>xor</li>
            </ul>
        </member>
        <member name="M:Deveel.Math.Logical.Not(Deveel.Math.BigInteger)">
            @see BigInteger#not() 
        </member>
        <member name="M:Deveel.Math.Logical.And(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @see BigInteger#and(BigInteger) 
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.Logical.AndPositive(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.Logical.AndDiffSigns(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.Logical.AndNegative(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <member name="M:Deveel.Math.Logical.AndNot(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @see BigInteger#andNot(BigInteger) 
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.Logical.AndNotPositive(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.Logical.AndNotPositiveNegative(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.Logical.AndNotNegativePositive(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.Logical.AndNotNegative(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <member name="M:Deveel.Math.Logical.Or(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @see BigInteger#or(BigInteger) 
        </member>
        <member name="M:Deveel.Math.Logical.OrPositive(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @return sign = 1, magnitude = longer.magnitude | shorter.magnitude
        </member>
        <member name="M:Deveel.Math.Logical.OrNegative(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @return sign = -1, magnitude = -(-val.magnitude | -that.magnitude) 
        </member>
        <member name="M:Deveel.Math.Logical.OrDiffSigns(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @return sign = -1, magnitude = -(positive.magnitude | -negative.magnitude) 
        </member>
        <member name="M:Deveel.Math.Logical.Xor(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @see BigInteger#xor(BigInteger) 
        </member>
        <member name="M:Deveel.Math.Logical.XorPositive(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @return sign = 0, magnitude = longer.magnitude | shorter.magnitude 
        </member>
        <member name="M:Deveel.Math.Logical.XorNegative(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @return sign = 0, magnitude = -val.magnitude ^ -that.magnitude 
        </member>
        <member name="M:Deveel.Math.Logical.XorDiffSigns(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            @return sign = 1, magnitude = -(positive.magnitude ^ -negative.magnitude)
        </member>
        <member name="T:Deveel.Math.MathContext">
            <summary>
            Immutable objects describing settings such as rounding 
            mode and digit precision for the numerical operations 
            provided by class <see cref="T:Deveel.Math.BigDecimal"/>.
            </summary>
        </member>
        <member name="F:Deveel.Math.MathContext.Decimal128">
            <summary>
            A <see cref="T:Deveel.Math.MathContext"/> which corresponds to the IEEE 754r quadruple decimal precision 
            format: 34 digit precision and <see cref="F:Deveel.Math.RoundingMode.HalfEven"/> rounding.
            </summary>
        </member>
        <member name="F:Deveel.Math.MathContext.Decimal32">
            <summary>
            A <see cref="T:Deveel.Math.MathContext"/> which corresponds to the IEEE 754r single decimal precision 
            format: 7 digit precision and <see cref="F:Deveel.Math.RoundingMode.HalfEven"/> rounding.
            </summary>
        </member>
        <member name="F:Deveel.Math.MathContext.Decimal64">
            <summary>
            A <see cref="T:Deveel.Math.MathContext"/> which corresponds to the IEEE 754r double decimal precision 
            format: 16 digit precision and <see cref="F:Deveel.Math.RoundingMode.HalfEven"/> rounding.
            </summary>
        </member>
        <member name="F:Deveel.Math.MathContext.Unlimited">
            <summary>
            A <see cref="T:Deveel.Math.MathContext"/> for unlimited precision with <see cref="F:Deveel.Math.RoundingMode.HalfUp"/> rounding.
            </summary>
        </member>
        <member name="F:Deveel.Math.MathContext.precision">
            <summary>
            The number of digits to be used for an operation; results are rounded to this precision.
            </summary>
        </member>
        <member name="F:Deveel.Math.MathContext.roundingMode">
            <summary>
            A <see cref="P:Deveel.Math.MathContext.RoundingMode"/> object which specifies the algorithm to be used for rounding.
            </summary>
        </member>
        <member name="F:Deveel.Math.MathContext.chPrecision">
            <summary>
            An array of <see cref="T:System.Char"/> containing: <c>'p','r','e','c','i','s','i','o','n','='</c>. 
            It's used to improve the methods related to <see cref="T:System.String"/> conversion.
            </summary>
            <seealso cref="!:MathContext(string)"/>
            <seealso cref="M:Deveel.Math.MathContext.ToString"/>
        </member>
        <member name="F:Deveel.Math.MathContext.chRoundingMode">
            <summary>
            An array of <see cref="T:System.Char"/> containing: <c>'r','o','u','n','d','i','n','g','M','o','d','e','='</c>. 
            It's used to improve the methods related to <see cref="T:System.String"/> conversion.
            </summary>
            <seealso cref="!:MathContext(string)"/>
            <seealso cref="M:Deveel.Math.MathContext.ToString"/>
        </member>
        <member name="M:Deveel.Math.MathContext.#ctor(System.Int32)">
            <summary>
            Constructs a new <see cref="T:Deveel.Math.MathContext"/> with the specified precision and with the 
            rounding mode <see cref="F:Deveel.Math.RoundingMode.HalfUp"/>.
            </summary>
            <param name="precision">The precision for the new context.</param>
            <remarks>
            If the precision passed is zero, then this implies that the computations have to 
            be performed exact, the rounding mode in this case is irrelevant.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If <paramref name="precision"/> is smaller than zero.
            </exception>
        </member>
        <member name="M:Deveel.Math.MathContext.#ctor(System.Int32,Deveel.Math.RoundingMode)">
            <summary>
             Constructs a new <see cref="T:Deveel.Math.MathContext"/> with the specified precision and with the 
            specified rounding mode.
            </summary>
            <param name="precision">The precision for the new context.</param>
            <param name="roundingMode">The rounding mode for the new context.</param>
            <remarks>
            If the precision passed is zero, then this implies that the computations have to 
            be performed exact, the rounding mode in this case is irrelevant.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If <paramref name="precision"/> is smaller than zero.
            </exception>
        </member>
        <member name="P:Deveel.Math.MathContext.Precision">
            <summary>
            Get the precision of the context.
            </summary>
            <remarks>
            The precision is the number of digits used for an operation. Results are rounded to 
            this precision. The precision is guaranteed to be non negative. If the precision is zero, 
            then the computations have to be performed exact, results are not rounded in this case.
            </remarks>
        </member>
        <member name="P:Deveel.Math.MathContext.RoundingMode">
            <summary>
            Gets the rounding mode of the context, that is the strategy used to round results.
            </summary>
            <seealso cref="T:Deveel.Math.RoundingMode"/>
        </member>
        <member name="M:Deveel.Math.MathContext.ToString">
            <summary>
            Returns the string representation for this <see cref="T:Deveel.Math.MathContext"/> instance.
            </summary>
            <remarks>
            The string has the form <c>"precision=&lt;precision&gt; roundingMode=&lt;roundingMode&gt;"</c> where 
            <c>&lt;precision&gt;</c> is an integer describing the number of digits used for operations 
            and <c>&lt;roundingMode&gt;</c> is the string representation of the rounding mode.
            </remarks>
            <returns>
            Returns the string that describes the current context.
            </returns>
        </member>
        <member name="T:Deveel.Math.Multiplication">
            Static library that provides all multiplication of {@link BigInteger} methods.
        </member>
        <member name="F:Deveel.Math.Multiplication.WhenUseKaratsuba">
            Break point in digits (number of {@code int} elements)
            between Karatsuba and Pencil and Paper multiply.
        </member>
        <member name="F:Deveel.Math.Multiplication.TenPows">
            An array with powers of ten that fit in the type {@code int}.
            ({@code 10^0,10^1,...,10^9})
        </member>
        <member name="F:Deveel.Math.Multiplication.FivePows">
            An array with powers of five that fit in the type {@code int}.
            ({@code 5^0,5^1,...,5^13})
        </member>
        <member name="F:Deveel.Math.Multiplication.BigTenPows">
            An array with the first powers of ten in {@code BigInteger} version.
            ({@code 10^0,10^1,...,10^31})
        </member>
        <member name="F:Deveel.Math.Multiplication.BigFivePows">
            An array with the first powers of five in {@code BigInteger} version.
            ({@code 5^0,5^1,...,5^31})
        </member>
        <member name="M:Deveel.Math.Multiplication.Multiply(Deveel.Math.BigInteger,Deveel.Math.BigInteger)">
            Performs a multiplication of two BigInteger and hides the algorithm used.
            @see BigInteger#multiply(BigInteger)
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.Multiplication.Karatsuba(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "M:Deveel.Math.Multiplication.MultiplyPap(Deveel.Math.BigInteger,Deveel.Math.BigInteger)" -->
        <member name="M:Deveel.Math.Multiplication.MultiplyByInt(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            Multiplies an array of integers by an integer value
            and saves the result in {@code res}.
            @param a the array of integers
            @param aSize the number of elements of intArray to be multiplied
            @param factor the multiplier
            @return the top digit of production
        </member>
        <member name="M:Deveel.Math.Multiplication.MultiplyByInt(System.Int32[],System.Int32,System.Int32)">
            Multiplies an array of integers by an integer value.
            @param a the array of integers
            @param aSize the number of elements of intArray to be multiplied
            @param factor the multiplier
            @return the top digit of production
        </member>
        <member name="M:Deveel.Math.Multiplication.MultiplyByPositiveInt(Deveel.Math.BigInteger,System.Int32)">
            Multiplies a number by a positive integer.
            @param val an arbitrary {@code BigInteger}
            @param factor a positive {@code int} number
            @return {@code val * factor}
        </member>
        <member name="M:Deveel.Math.Multiplication.Square(System.Int32[],System.Int32,System.Int32[])">
            Performs a<sup>2</sup>
            @param a The number to square.
            @param aLen The length of the number to square.
        </member>
        <member name="M:Deveel.Math.Multiplication.MultiplyByTenPow(Deveel.Math.BigInteger,System.Int64)">
            Multiplies a number by a power of ten.
            This method is used in {@code BigDecimal} class.
            @param val the number to be multiplied
            @param exp a positive {@code long} exponent
            @return {@code val * 10<sup>exp</sup>}
        </member>
        <member name="M:Deveel.Math.Multiplication.PowerOf10(System.Int64)">
            It calculates a power of ten, which exponent could be out of 32-bit range.
            Note that internally this method will be used in the worst case with
            an exponent equals to: {@code Integer.MAX_VALUE - Integer.MIN_VALUE}.
            @param exp the exponent of power of ten, it must be positive.
            @return a {@code BigInteger} with value {@code 10<sup>exp</sup>}.
        </member>
        <member name="M:Deveel.Math.Multiplication.MultiplyByFivePow(Deveel.Math.BigInteger,System.Int32)">
            Multiplies a number by a power of five.
            This method is used in {@code BigDecimal} class.
            @param val the number to be multiplied
            @param exp a positive {@code int} exponent
            @return {@code val * 5<sup>exp</sup>}
        </member>
        <member name="M:Deveel.Math.Multiplication.UnsignedMultAddAdd(System.Int32,System.Int32,System.Int32,System.Int32)">
            Computes the value unsigned ((uint)a*(uint)b + (uint)c + (uint)d). This
            method could improve the readability and performance of the code.
            
            @param a
                       parameter 1
            @param b
                       parameter 2
            @param c
                       parameter 3
            @param d
                       parameter 4
            @return value of expression
        </member>
        <member name="T:Deveel.Math.Primality">
            Provides primality probabilistic methods.
        </member>
        <member name="F:Deveel.Math.Primality.primes">
            All prime numbers with bit length lesser than 10 bits. 
        </member>
        <member name="F:Deveel.Math.Primality.BIprimes">
            All {@code BigInteger} prime numbers with bit length lesser than 8 bits. 
        </member>
        <!-- El comentario XML con formato incorrecto se ha omitido para el miembro "F:Deveel.Math.Primality.BITS" -->
        <member name="F:Deveel.Math.Primality.offsetPrimes">
            It encodes how many i-bit primes there are in the table for
            {@code i=2,...,10}. For example {@code offsetPrimes[6]} says that from
            index {@code 11} exists {@code 7} consecutive {@code 6}-bit prime
            numbers in the array.
        </member>
        <member name="M:Deveel.Math.Primality.NextProbablePrime(Deveel.Math.BigInteger,System.Threading.CancellationToken)">
            It uses the sieve of Eratosthenes to discard several composite numbers in
            some appropriate range (at the moment {@code [this, this + 1024]}). After
            this process it applies the Miller-Rabin test to the numbers that were
            not discarded in the sieve.
            
            @see BigInteger#nextProbablePrime()
            @see #millerRabin(BigInteger, int)
        </member>
        <member name="M:Deveel.Math.Primality.ConsBigInteger(System.Int32,System.Int32,System.Random,System.Threading.CancellationToken)">
            A random number is generated until a probable prime number is found.
            
            @see BigInteger#BigInteger(int,int,Random)
            @see BigInteger#probablePrime(int,Random)
            @see #isProbablePrime(BigInteger, int)
        </member>
        <member name="M:Deveel.Math.Primality.IsProbablePrime(Deveel.Math.BigInteger,System.Int32,System.Threading.CancellationToken)">
            @see BigInteger#isProbablePrime(int)
            @see #millerRabin(BigInteger, int)
            @ar.org.fitc.ref Optimizations: "A. Menezes - Handbook of applied
                             Cryptography, Chapter 4".
        </member>
        <member name="M:Deveel.Math.Primality.MillerRabin(Deveel.Math.BigInteger,System.Int32,System.Threading.CancellationToken)">
            The Miller-Rabin primality test.
            
            @param n the input number to be tested.
            @param t the number of trials.
            @return {@code false} if the number is definitely compose, otherwise
                    {@code true} with probability {@code 1 - 4<sup>(-t)</sup>}.
            @ar.org.fitc.ref "D. Knuth, The Art of Computer Programming Vo.2, Section
                             4.5.4., Algorithm P"
        </member>
        <member name="T:Deveel.Math.RoundingMode">
            <summary>
            Enumerates the possible strategies used to round results.
            </summary>
        </member>
        <member name="F:Deveel.Math.RoundingMode.Up">
            <summary>
            Positive values are rounded towards positive infinity and negative 
            values towards negative infinity. (<c>x.Round().Abs() >= x.Abs()</c>
            </summary>
        </member>
        <member name="F:Deveel.Math.RoundingMode.Down">
            <summary>
            The values are rounded towards zero. (<c>x.Round().Abs() &lt;= x.abs()</c>)
            </summary>
        </member>
        <member name="F:Deveel.Math.RoundingMode.Ceiling">
            <summary>
            Rounds towards positive infinity: for positive values this rounding mode behaves 
            as <see cref="F:Deveel.Math.RoundingMode.Up"/>, for negative values as <see cref="F:Deveel.Math.RoundingMode.Down"/> (<c>x.round() &gt;= x</c>)
            </summary>
        </member>
        <member name="F:Deveel.Math.RoundingMode.Floor">
            <summary>
            Rounds towards negative infinity: for positive values this rounding mode behaves 
            as <see cref="F:Deveel.Math.RoundingMode.Down"/>, for negative values as <see cref="F:Deveel.Math.RoundingMode.Up"/> (<c>x.Round() &lt;= x</c>).
            </summary>
        </member>
        <member name="F:Deveel.Math.RoundingMode.HalfUp">
            <summary>
            Values are rounded towards the nearest neighbor and ties are broken by rounding up.
            </summary>
        </member>
        <member name="F:Deveel.Math.RoundingMode.HalfDown">
            <summary>
            Values are rounded towards the nearest neighbor and ties are broken by rounding down.
            </summary>
        </member>
        <member name="F:Deveel.Math.RoundingMode.HalfEven">
            <summary>
            Values are rounded towards the nearest neighbor and ties are broken by rounding to the 
            even neighbor.
            </summary>
        </member>
        <member name="F:Deveel.Math.RoundingMode.Unnecessary">
            <summary>
            The rounding operations throws an <see cref="T:System.ArithmeticException"/> for the case that rounding 
            is necessary (i.e. for the case that the value cannot be represented exactly)
            </summary>
        </member>
        <member name="M:Deveel.Math.Utils.URShift(System.Int32,System.Int32)">
            <summary>
            Operates a shift on the given integer by the number of bits specified.
            </summary>
            <param name="number">The number to shift.</param>
            <param name="bits">The number of bits to shift the given number.</param>
            <returns>
            Returns an <see cref="T:System.Int32">int</see> representing the shifted
            number.
            </returns>
        </member>
        <member name="T:Deveel.Math.Messages">
            <summary>
              Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.ResourceManager">
            <summary>
              Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.Culture">
            <summary>
              Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
              búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math00">
            <summary>
              Busca una cadena traducida similar a Invalid rounding mode.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math01">
            <summary>
              Busca una cadena traducida similar a power of ten too big.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math02">
            <summary>
              Busca una cadena traducida similar a Scale out of range..
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math03">
            <summary>
              Busca una cadena traducida similar a Infinite or NaN.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math04">
            <summary>
              Busca una cadena traducida similar a Division by zero.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math05">
            <summary>
              Busca una cadena traducida similar a Non-terminating decimal expansion; no exact representable decimal result..
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math06">
            <summary>
              Busca una cadena traducida similar a Division impossible.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math07">
            <summary>
              Busca una cadena traducida similar a Invalid Operation.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math08">
            <summary>
              Busca una cadena traducida similar a Rounding necessary.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math09">
            <summary>
              Busca una cadena traducida similar a Overflow.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math0A">
            <summary>
              Busca una cadena traducida similar a Underflow.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math0B">
            <summary>
              Busca una cadena traducida similar a null unscaled value.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math0C">
            <summary>
              Busca una cadena traducida similar a Digits &lt; 0.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math0D">
            <summary>
              Busca una cadena traducida similar a null RoundingMode.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math0E">
            <summary>
              Busca una cadena traducida similar a bad string format.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math0F">
            <summary>
              Busca una cadena traducida similar a bad precision value.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math10">
            <summary>
              Busca una cadena traducida similar a null roundingMode.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math11">
            <summary>
              Busca una cadena traducida similar a Radix out of range.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math12">
            <summary>
              Busca una cadena traducida similar a Zero length BigInteger.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math13">
            <summary>
              Busca una cadena traducida similar a Invalid signum value.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math14">
            <summary>
              Busca una cadena traducida similar a signum-magnitude mismatch.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math15">
            <summary>
              Busca una cadena traducida similar a Negative bit address.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math16">
            <summary>
              Busca una cadena traducida similar a Negative exponent.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math17">
            <summary>
              Busca una cadena traducida similar a BigInteger divide by zero.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math18">
            <summary>
              Busca una cadena traducida similar a BigInteger: modulus not positive.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math19">
            <summary>
              Busca una cadena traducida similar a BigInteger not invertible..
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math1A">
            <summary>
              Busca una cadena traducida similar a start &lt; 0: {0}.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math1B">
            <summary>
              Busca una cadena traducida similar a numBits must be non-negative.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.math1C">
            <summary>
              Busca una cadena traducida similar a bitLength &lt; 2.
            </summary>
        </member>
        <member name="P:Deveel.Math.Messages.String1">
            <summary>
              Busca una cadena traducida similar a .
            </summary>
        </member>
    </members>
</doc>
